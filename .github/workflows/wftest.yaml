name: CI

on:
  pull_request:
    branches:
      - master

jobs:
  # -------------------------------------------------------------
  # Using GitHub's API
  # -------------------------------------------------------------
  # Event `pull_request`: Returns all changed pull request files.
  # --------------------------------------------------------------
  job1:
    # NOTE:
    # - This is limited to pull_request* events and would raise an error for other events.
    # - A maximum of 3000 files can be returned.
    # - For more flexibility and no limitations see "Using local .git directory" below.

    runs-on: ubuntu-latest  # windows-latest | macos-latest
    name: Test changed-files
    permissions:
      pull-requests: read

    steps:
      - uses: actions/checkout@v2
      
      
      - name: Get changed files
        id: changed_files
        uses: tj-actions/changed-files@v37
        with:
          separator: "ยง"

      - name: Run if any of the listed files above is changed
        if: ${{ steps.changed_files.outputs.any_changed }} == 'true'
        run: |
          $tst = "${{ steps.changed_files.outputs.all_changed_files }}" #| Out-String
          $tst = $tst.Split("ยง")
          echo "joeh2: $tst"
          # echo $tst.GetType()
          # foreach ( $file in ${{ steps.changed_files.outputs.all_changed_files }} ) {
          foreach ( $file in $tst ) {
            echo "$file was changed"
            if ($file.Contains("azurepolicy.json")) {
              Write-Host "$file was checked"
              .\Scripts\Confirm-PolicyDefinitionIsValid.ps1 $file
            }
          }
        shell: pwsh

      #- name: List all changed files
      #  run: |
      #    for file in ${{ steps.changed_files.outputs.all_changed_files }}; do
      #      echo "$file is one of the changed files"
      #    done
          #echo ${{ steps.changed_files.outputs.all_changed_files }} >> $TEST_OUTPUTSCA
          #echo "TEST_OUTPUT=${{ steps.changed_files.outputs.all_changed_files }}" >> $GITHUB_ENV
      
      #- name: test changes
      #  id: test-files
      #  run: |
      #    #Write-Output "hier moechte ich checken"
      #    # Write-Output ">>>" + $TEST_OUTPUT + "<<<"
      #    #Write-Output ">>>>" + $env:TEST_OUTPUT + "<<<<"
      #    # Write-Output "Believe it's the start"
      #    #Write-Output ${{steps.changed_files.outputs.all_changed_files}}
      #    # $out = ${{steps.changed_files.outputs.all_changed_files}}
      #    # Write-Output $out.GetType().Name
      #    #Write-Output ${{steps.changed_files.outputs.all_changed_files}} | Out-File -FilePath .\test.txt 
      #    # Write-Output $out | Out-File -FilePath .\test.txt 
      #    # Write-Output "Believe it's the end"
      #   # Write-Output ${{steps.changed_files.outputs.all_changed_files}}.GetType()
          
          #$content = Get-Content .\test.txt
          #$content = Get-Content .github\outputs\added_files.txt
          # Write-Output "***" + $content + "***"
      #    Write-Output "####################################################################"
          
          # foreach($line in Get-Content .\test.txt) {
      #    foreach($line in Get-Content .github\outputs\added_files.txt) {
          #$line = $line -replace "$", " "
      #      echo "$line was changed"
      #      if ($line.Contains("azurepolicy.json")) {
      #        Write-Host "$line was checked"
      #        .\Scripts\Confirm-PolicyDefinitionIsValid.ps1 $line
      #      }
      #    }
          
          
          # $files = @(${{ join(steps.changed_files.outputs.all_changed_files, ',') }})

          # For ($i=0; $i -lt $files.Length; $i++) {
          #   echo $files[$i]
          # }

          # foreach ( $file in ${{ steps.changed_files.outputs.all_changed_files }} ) {
          #   echo "$file was changed"
          #   if ($file -contains "azurepolicy.json") {
          #      Write-Host "$file was checked"
          #      .\Scripts\Confirm-PolicyDefinitionIsValid.ps1 $file
          #   }
          # }
      #  shell: pwsh
